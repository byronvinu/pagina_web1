<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>R | Byronvinu</title>
    <link>/categories/r/</link>
      <atom:link href="/categories/r/index.xml" rel="self" type="application/rss+xml" />
    <description>R</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>es</language><lastBuildDate>Thu, 29 Aug 2019 00:00:00 +0000</lastBuildDate>
    <image>
      <url>/img/icon-192.png</url>
      <title>R</title>
      <link>/categories/r/</link>
    </image>
    
    <item>
      <title>GRAFICADOR DE FUNCIONES </title>
      <link>/post/graficador-de-funciones/</link>
      <pubDate>Thu, 29 Aug 2019 00:00:00 +0000</pubDate>
      <guid>/post/graficador-de-funciones/</guid>
      <description>


&lt;div id=&#34;intro&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Intro&lt;/h1&gt;
&lt;p&gt;En este post, veremos como crear una aplicación web en &lt;em&gt;shiny&lt;/em&gt; que genere gráficos de funciones. Si no conoces que es shiny, mira la presentación realizada por Manuel Oviedo &lt;a href=&#34;https://rpubs.com/moviedo/shiny&#34;&gt;aquí&lt;/a&gt;&lt;/p&gt;
&lt;/div&gt;
&lt;div id=&#34;inicio&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Inicio&lt;/h1&gt;
&lt;p&gt;Los paquetes necesarios son:&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;library(shiny)
library(ggplot2)&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;interfaz-ui&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Interfaz (UI)&lt;/h1&gt;
&lt;p&gt;En esta parte de la aplicación se tiene tres widget, el primero un &lt;em&gt;textInput()&lt;/em&gt; donde se ingresa la función a evaluar y dos &lt;em&gt;numericInput&lt;/em&gt; que definen el recorido de la variable x.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;ui &amp;lt;- shinyUI( 
  fluidPage( sidebarPanel( 
    # Titulo de la app
    titlePanel(&amp;quot;Graficador de funciones&amp;quot;),
    # ingreso de la funcion 
    textInput(&amp;quot;funcion&amp;quot;, &amp;quot;Ingrese la función&amp;quot;, &amp;quot;sin(x)&amp;quot;),
    #ingreso de 
    numericInput(&amp;quot;from&amp;quot;, &amp;quot;Desde:&amp;quot;, 0, min = -100, max = 100) ,
    numericInput(&amp;quot;to&amp;quot;, &amp;quot;Hasta:&amp;quot;, 10, min = -100, max = 100) ),
      mainPanel(
        plotOutput(&amp;quot;distPlot&amp;quot;)
      )
    )
  )&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;
&lt;div id=&#34;server&#34; class=&#34;section level1&#34;&gt;
&lt;h1&gt;Server&lt;/h1&gt;
&lt;p&gt;En esta parte de la aplicación se evalua la función ingresada en el &lt;em&gt;textInput&lt;/em&gt;, para poder realizar esta operación se utiliza la función &lt;em&gt;parse()&lt;/em&gt;, la cual permite transformar el string ingresado en una expresión.&lt;/p&gt;
&lt;pre class=&#34;r&#34;&gt;&lt;code&gt;server &amp;lt;- function(input, output,session) { 
  
  datos&amp;lt;-reactive( { 
   x&amp;lt;-seq(input$from,input$to,by = 0.01)
   y&amp;lt;- eval(parse(text = paste(input$funcion)))
   datos&amp;lt;-data.frame(x,y)
  })
  output$distPlot &amp;lt;- renderPlot({
    ggplot(datos(),aes(x,y))+
      geom_line(colour=&amp;#39;red&amp;#39;)
  })
}&lt;/code&gt;&lt;/pre&gt;
&lt;p&gt;El resultado final es:&lt;/p&gt;
&lt;p&gt;&lt;img src=&#34;Shiny.gif&#34; /&gt;&lt;/p&gt;
&lt;/div&gt;
</description>
    </item>
    
  </channel>
</rss>
